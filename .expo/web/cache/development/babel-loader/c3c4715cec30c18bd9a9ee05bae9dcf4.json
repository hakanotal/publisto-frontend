{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\"],\n  _excluded2 = [\"visible\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n}\n\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var _Screens, _Screens$screensEnabl;\n  var enabled = _ref.enabled,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if ((_Screens = Screens) !== null && _Screens !== void 0 && (_Screens$screensEnabl = _Screens.screensEnabled) !== null && _Screens$screensEnabl !== void 0 && _Screens$screensEnabl.call(_Screens)) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n  return React.createElement(View, rest);\n};\nexport function MaybeScreen(_ref2) {\n  var _Screens2, _Screens2$screensEnab;\n  var visible = _ref2.visible,\n    children = _ref2.children,\n    rest = _objectWithoutProperties(_ref2, _excluded2);\n  if ((_Screens2 = Screens) !== null && _Screens2 !== void 0 && (_Screens2$screensEnab = _Screens2.screensEnabled) !== null && _Screens2$screensEnab !== void 0 && _Screens2$screensEnab.call(_Screens2)) {\n    return React.createElement(Screens.Screen, _extends({\n      activityState: visible ? 2 : 0\n    }, rest), children);\n  }\n  return React.createElement(ResourceSavingView, _extends({\n    visible: visible\n  }, rest), children);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,kBAAT,QAAmC,4BAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA;AAWA,IAAIC,OAAJ;AAEA,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU;AAEX;;AAED,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAGC,MAO9B;EAAA;EAAA,IANJC,OADmC,GAO/BD,KANJC,OADmC;IAEhCC,gCAKCF;EACJ,gBAAIJ,OAAJ,8DAAIO,SAASC,cAAb,kDAAIC,oCAAJ,EAAiC;IAC/B,OAAOV,oBAACC,OAAD,CAASU,eAAT;MAAyBL,OAAO,EAAEA;IAAlC,GAA+CC,IAA/C,EAAP;EACD;EAED,OAAOP,oBAACY,IAAD,EAAUL,IAAV,CAAP;AACD,CAbM;AAeP,OAAO,SAASM,WAAT,QAA4D;EAAA;EAAA,IAArCC,OAAF,GAAuCC,MAArCD,OAAF;IAAWE,QAAX,GAAuCD,MAA5BC,QAAX;IAAwBT,gCAAeQ;EACjE,iBAAId,OAAJ,+DAAIgB,UAASR,cAAb,kDAAIS,qCAAJ,EAAiC;IAC/B,OACElB,oBAACC,OAAD,CAASkB,MAAT;MAAgBC,aAAa,EAAEN,OAAO,GAAG,CAAH,GAAO;IAA7C,GAAoDP,IAApD,GACGS,QADH,CADF;EAKD;EAED,OACEhB,oBAACD,kBAAD;IAAoBe,OAAO,EAAEA;EAA7B,GAA0CP,IAA1C,GACGS,QADH,CADF;AAKD","names":["ResourceSavingView","React","Screens","require","e","MaybeScreenContainer","_ref","enabled","rest","_Screens","screensEnabled","_Screens$screensEnabl","ScreenContainer","View","MaybeScreen","visible","_ref2","children","_Screens2","_Screens2$screensEnab","Screen","activityState"],"sources":["ScreenFallback.tsx"],"sourcesContent":["import { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { StyleProp, View, ViewProps, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  freezeOnBlur?: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  hasTwoStates: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ visible, children, ...rest }: Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen activityState={visible ? 2 : 0} {...rest}>\n        {children}\n      </Screens.Screen>\n    );\n  }\n\n  return (\n    <ResourceSavingView visible={visible} {...rest}>\n      {children}\n    </ResourceSavingView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}