{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\", \"sceneContainerStyle\"],\n  _excluded2 = [\"lazy\", \"tabBarOptions\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport BottomTabView from \"../views/BottomTabView\";\nfunction BottomTabNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    sceneContainerStyle = _ref.sceneContainerStyle,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  var lazy = restWithDeprecated.lazy,\n    tabBarOptions = restWithDeprecated.tabBarOptions,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n  if (tabBarOptions) {\n    var _tabBarOptions$labelP;\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition: (_tabBarOptions$labelP = tabBarOptions.labelPosition) !== null && _tabBarOptions$labelP !== void 0 ? _tabBarOptions$labelP : tabBarOptions.adaptive === false ? 'below-icon' : undefined,\n      tabBarStyle: [{\n        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'\n      }, defaultScreenOptions.tabBarStyle]\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, \"Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.\");\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.\");\n  }\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(BottomTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    sceneContainerStyle: sceneContainerStyle\n  })));\n}\nexport default createNavigatorFactory(BottomTabNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","BottomTabView","BottomTabNavigator","id","_ref","initialRouteName","backBehavior","children","screenListeners","screenOptions","sceneContainerStyle","restWithDeprecated","lazy","tabBarOptions","rest","defaultScreenOptions","Object","assign","tabBarHideOnKeyboard","keyboardHidesTabBar","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarActiveBackgroundColor","activeBackgroundColor","tabBarInactiveBackgroundColor","inactiveBackgroundColor","tabBarAllowFontScaling","allowFontScaling","tabBarShowLabel","showLabel","tabBarLabelStyle","labelStyle","tabBarIconStyle","iconStyle","tabBarItemStyle","tabStyle","tabBarLabelPosition","labelPosition","adaptive","undefined","tabBarStyle","display","tabBarVisible","keys","forEach","key","JSON","stringify","state","descriptors","navigation","NavigationContent"],"sources":["createBottomTabNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationEventMap,\n  BottomTabNavigationOptions,\n} from '../types';\nimport BottomTabView from '../views/BottomTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  id,\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  sceneContainerStyle,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition:\n        tabBarOptions.labelPosition ??\n        (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [\n        { display: tabBarOptions.tabBarVisible ? 'none' : 'flex' },\n        defaultScreenOptions.tabBarStyle,\n      ],\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof BottomTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      BottomTabNavigationOptions,\n      BottomTabNavigationEventMap\n    >(TabRouter, {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"]},"metadata":{},"sourceType":"module"}